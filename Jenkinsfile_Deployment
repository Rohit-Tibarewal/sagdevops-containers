pipeline {
    agent any
   
    parameters {
		choice(
            name: 'targetEnvironment',
            choices: ['dev', 'test', 'qa', 'prod'],
            description: 'Select the deployment environment'
        )
        string(name: 'buildScenario', defaultValue: 'microservices-runtime', description: 'Asset type to be build and pushed - available options: "microservices-runtime", "universal-messaging"')
        string(name: 'sourceContainerRegistryCredentials', defaultValue: 'cred-rohit-dockerhub', description: 'Source container registry credentials') 

        string(name: 'sourceContainerRegistryHost', defaultValue: 'docker.io', description: 'Source registry host. Default points to docker store.') 
        string(name: 'sourceContainerRegistryOrg', defaultValue: 'rohittibarewal', description: 'Source registry organization. Default points to SoftwareAG organization at docker store.') 
        string(name: 'sourceImageName', defaultValue: 'wm_msr107adapter_usinginstaller', description: 'Source image name. Sample values from docker hub - "webmethods-microservicesruntime" and "universalmessaging-server". Check here fo all available in docker store https://hub.docker.com/search?q=softwareag&type=image&image_filter=store') 
        string(name: 'sourceImageTag', defaultValue: 'base', description: 'Source image tag. For available version check the Softwareag section at docker store.') 

        
        string(name: 'testContainerHost', defaultValue: 'localhost', description: 'Host where the test container will be exposed') 
        string(name: 'testContainerPort', defaultValue: '5555', description: 'Port under which the test container will be reachable - e.g. 5555 or 9000. If multiple parallel pipelines are being executed, define different ports to avoid conflict on the host system - e.g. 5556, 5557, 5558.')       
        
        string(name: 'targetContainerRegistryCredentials', defaultValue: 'cred-rohit-dockerhub', description: 'Target container registry credentials') 
        string(name: 'targetContainerRegistryHost', defaultValue: 'docker.io', description: 'Target container registry host') 
        string(name: 'targetContainerRegistryOrg', defaultValue: 'rohittibarewal', description: 'Target container registry organization') 
        string(name: 'targetImageName', defaultValue: 'wm_msr107adapter_solutionimage', description: 'Target image name. Small caps only.') 
        string(name: 'targetImageTag', defaultValue: 'latest', description: 'Target image tag. A tag name must be valid ASCII and may contain lowercase and uppercase letters, digits, underscores, periods and dashes. A tag name may not start with a period or a dash and may contain a maximum of 128 characters.') 
        booleanParam(name: 'runTests', defaultValue: false, description: 'Whether to run test stage')
		
        string(name: 'deploymentName', defaultValue: 'msr-withadapter', description: 'The Deployment name whose container needs to be updated') 
        string(name: 'targetContainerName', defaultValue: 'msr-withadapter-cn', description: 'The Container, inside given Deployment, whose image needs to be updated') 
		booleanParam(name: 'ignoreISCCRFailure', defaultValue: true, description: 'Whether to Ignore Code Review Failures')
		
    }
    environment {
       BUILD_SCENARIO="${params.buildScenario}"  
       TARGET_REG_HOST="${params.targetContainerRegistryHost}"
       TARGET_REG_ORG="${params.targetContainerRegistryOrg}"
       TARGET_REPO_NAME="${params.targetImageName}"
       TARGET_REPO_TAG="${params.targetImageTag}"
	   DEPLOYMENT_NAME="${params.deploymentName}"
       CONTAINER_NAME="${params.targetContainerName}"
	   TARGET_ENVIRONMENT="${params.targetEnvironment}"	   
	}
    
    
    stages {
		stage('Set Environment') {
		  steps {
			echo "The Target Environment is ${TARGET_ENVIRONMENT}"
		  }
		 }
		
		stage("Release") {
            steps {
					sh '''
					echo  "Update the PATH"
					export PATH=$PATH:/usr/local/bin:/usr/local/sbin
					echo "Apply Target Configurations"
					kubectl create configmap msr-app-properties --from-file=${WORKSPACE}/containers/${BUILD_SCENARIO}/properties/${TARGET_ENVIRONMENT}/application.properties -o yaml --dry-run=client | kubectl replace -f -
                    echo  "Apply Rolling Update"
					minikube kubectl -- set image deployment/${DEPLOYMENT_NAME} ${CONTAINER_NAME}=${TARGET_REG_ORG}/${TARGET_REPO_NAME}:${TARGET_REPO_TAG}
					minikube kubectl -- rollout status deployment/${DEPLOYMENT_NAME} -w				
					'''
            }
        }
    }
}
